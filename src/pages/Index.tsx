import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import AdminPanel from '@/components/AdminPanel';

type View = 'main' | 'topup' | 'history' | 'help' | 'admin';
type TopupStep = 'amount' | 'qr' | 'details';
type Currency = 'CNY' | 'RUB';

interface Transaction {
  id: number;
  amount: number;
  currency: string;
  amount_cny: number;
  date: string;
  status: 'pending' | 'completed' | 'failed';
  payment_details?: {
    recipient_name: string;
    account_number: string;
  };
}

const CNY_TO_RUB_RATE = 11.40;
const API_BASE_URL = 'https://functions.poehali.dev';
const TRANSACTIONS_URL = `${API_BASE_URL}/414252e7-8c91-4292-98d5-f6fd21aab3f4`;

const Index = () => {
  const [view, setView] = useState<View>('main');
  const [topupStep, setTopupStep] = useState<TopupStep>('amount');
  const [amount, setAmount] = useState('');
  const [currency, setCurrency] = useState<Currency>('CNY');
  const [qrUploaded, setQrUploaded] = useState(false);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [currentTransaction, setCurrentTransaction] = useState<Transaction | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (view === 'history') {
      fetchTransactions();
    }
  }, [view]);

  const fetchTransactions = async () => {
    try {
      const response = await fetch(TRANSACTIONS_URL);
      const data = await response.json();
      setTransactions(data);
    } catch (error) {
      console.error('Failed to fetch transactions:', error);
    }
  };

  const handleAmountSubmit = () => {
    if (!amount || parseFloat(amount) <= 0) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É',
        variant: 'destructive',
      });
      return;
    }
    setTopupStep('qr');
  };

  const handleQrUpload = async () => {
    setQrUploaded(true);
    
    try {
      const response = await fetch(TRANSACTIONS_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: parseFloat(amount),
          currency: currency,
        }),
      });

      const transaction = await response.json();
      setCurrentTransaction(transaction);

      setTimeout(() => {
        setTopupStep('details');
        toast({
          title: '‚úÖ QR-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!',
          description: '–í–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã',
        });
      }, 500);
    } catch (error) {
      console.error('Failed to create transaction:', error);
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
        variant: 'destructive',
      });
    }
  };

  const getDisplayAmount = () => {
    const amountValue = parseFloat(amount);
    if (currency === 'CNY') {
      return `¬• ${amountValue}`;
    }
    return `‚ÇΩ ${amountValue} (¬• ${(amountValue / CNY_TO_RUB_RATE).toFixed(2)})`;
  };

  const renderMainView = () => (
    <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-gradient-to-br from-background via-background to-accent/10">
      <div className="w-full max-w-md space-y-6">
        <div className="text-center space-y-2 mb-8">
          <h1 className="text-4xl font-bold">üí≥ Alipay Bot</h1>
          <p className="text-muted-foreground">–ë—ã—Å—Ç—Ä–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</p>
        </div>

        <div className="space-y-3">
          <Button
            onClick={() => {
              setView('topup');
              setTopupStep('amount');
              setAmount('');
              setCurrency('CNY');
              setQrUploaded(false);
              setCurrentTransaction(null);
            }}
            className="w-full h-14 text-lg bg-card hover:bg-card/80 text-foreground border border-border shadow-lg"
            variant="outline"
          >
            <span className="mr-2">üì±</span> –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ê–ª–∏–ø–µ–π
          </Button>

          <Button
            onClick={() => setView('history')}
            className="w-full h-14 text-lg bg-card hover:bg-card/80 text-foreground border border-border shadow-lg"
            variant="outline"
          >
            <span className="mr-2">üìä</span> –ú–æ–∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è
          </Button>

          <Button
            onClick={() => setView('help')}
            className="w-full h-14 text-lg bg-card hover:bg-card/80 text-foreground border border-border shadow-lg"
            variant="outline"
          >
            <span className="mr-2">üÜò</span> –ü–æ–º–æ—â—å
          </Button>

          <Button
            onClick={() => setView('admin')}
            className="w-full h-10 text-sm bg-muted/50 hover:bg-muted text-muted-foreground border border-border"
            variant="outline"
          >
            <span className="mr-2">‚öôÔ∏è</span> –ê–¥–º–∏–Ω–∫–∞
          </Button>
        </div>
      </div>
    </div>
  );

  const renderTopupView = () => (
    <div className="min-h-screen p-4 bg-gradient-to-br from-background via-background to-accent/10">
      <div className="max-w-md mx-auto pt-8">
        <Button
          onClick={() => setView('main')}
          variant="ghost"
          className="mb-6"
        >
          <Icon name="ArrowLeft" className="mr-2" size={20} />
          –ù–∞–∑–∞–¥
        </Button>

        <Card className="p-6 bg-card border-border shadow-xl">
          {topupStep === 'amount' && (
            <div className="space-y-6">
              <div className="text-center space-y-2">
                <h2 className="text-2xl font-bold">üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É</h2>
                <p className="text-muted-foreground">
                  –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                </p>
              </div>

              <div className="space-y-4">
                <div className="space-y-3">
                  <Label>–í–∞–ª—é—Ç–∞</Label>
                  <RadioGroup value={currency} onValueChange={(value) => setCurrency(value as Currency)}>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-border hover:bg-muted/50 transition-colors">
                      <RadioGroupItem value="CNY" id="cny" />
                      <Label htmlFor="cny" className="flex-1 cursor-pointer">
                        <div className="font-medium">¬• –Æ–∞–Ω–∏ (CNY)</div>
                        <div className="text-sm text-muted-foreground">–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å</div>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2 p-3 rounded-lg border border-border hover:bg-muted/50 transition-colors">
                      <RadioGroupItem value="RUB" id="rub" />
                      <Label htmlFor="rub" className="flex-1 cursor-pointer">
                        <div className="font-medium">‚ÇΩ –†—É–±–ª–∏ (RUB)</div>
                        <div className="text-sm text-muted-foreground">–ö—É—Ä—Å: 1¬• = 11.40‚ÇΩ</div>
                      </Label>
                    </div>
                  </RadioGroup>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="amount">–°—É–º–º–∞ ({currency === 'CNY' ? '¬•' : '‚ÇΩ'})</Label>
                  <Input
                    id="amount"
                    type="number"
                    placeholder={currency === 'CNY' ? '1000' : '11400'}
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    className="text-lg h-12"
                  />
                  {currency === 'RUB' && amount && parseFloat(amount) > 0 && (
                    <p className="text-sm text-muted-foreground">
                      ‚âà ¬• {(parseFloat(amount) / CNY_TO_RUB_RATE).toFixed(2)}
                    </p>
                  )}
                </div>

                <Button
                  onClick={handleAmountSubmit}
                  className="w-full h-12 text-lg"
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                  <Icon name="ArrowRight" className="ml-2" size={20} />
                </Button>
              </div>
            </div>
          )}

          {topupStep === 'qr' && (
            <div className="space-y-6">
              <div className="text-center space-y-2">
                <h2 className="text-2xl font-bold">üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥</h2>
                <p className="text-muted-foreground">
                  –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à QR-–∫–æ–¥ Alipay
                </p>
              </div>

              <div className="space-y-4">
                <div className="border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors">
                  <Icon name="Upload" size={48} className="mx-auto mb-4 text-muted-foreground" />
                  <p className="text-sm text-muted-foreground mb-4">
                    –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞
                  </p>
                  <Input
                    type="file"
                    accept="image/*"
                    className="hidden"
                    id="qr-upload"
                    onChange={handleQrUpload}
                  />
                  <Button asChild>
                    <label htmlFor="qr-upload" className="cursor-pointer">
                      –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
                    </label>
                  </Button>
                </div>

                {qrUploaded && (
                  <div className="text-center text-sm text-green-500">
                    ‚úÖ QR-–∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω
                  </div>
                )}
              </div>
            </div>
          )}

          {topupStep === 'details' && currentTransaction && (
            <div className="space-y-6">
              <div className="text-center space-y-2">
                <h2 className="text-2xl font-bold">‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</h2>
                <p className="text-muted-foreground">
                  –û—Ç–ø—Ä–∞–≤—å—Ç–µ {getDisplayAmount()} –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
                </p>
              </div>

              <div className="space-y-4 bg-muted/50 p-4 rounded-lg">
                {currentTransaction.payment_details && (
                  <>
                    <div className="space-y-2">
                      <p className="text-sm font-medium text-muted-foreground">
                        –ü–æ–ª—É—á–∞—Ç–µ–ª—å
                      </p>
                      <p className="text-lg font-mono">{currentTransaction.payment_details.recipient_name}</p>
                    </div>

                    <div className="space-y-2">
                      <p className="text-sm font-medium text-muted-foreground">
                        –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞
                      </p>
                      <p className="text-lg font-mono">{currentTransaction.payment_details.account_number}</p>
                    </div>
                  </>
                )}

                <div className="space-y-2">
                  <p className="text-sm font-medium text-muted-foreground">
                    –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
                  </p>
                  <p className="text-2xl font-bold text-primary">{getDisplayAmount()}</p>
                </div>
              </div>

              <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4">
                <p className="text-sm text-yellow-200">
                  ‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç
                </p>
              </div>

              <Button
                onClick={() => setView('main')}
                className="w-full h-12"
              >
                –ì–æ—Ç–æ–≤–æ
              </Button>
            </div>
          )}
        </Card>
      </div>
    </div>
  );

  const renderHistoryView = () => (
    <div className="min-h-screen p-4 bg-gradient-to-br from-background via-background to-accent/10">
      <div className="max-w-md mx-auto pt-8">
        <Button
          onClick={() => setView('main')}
          variant="ghost"
          className="mb-6"
        >
          <Icon name="ArrowLeft" className="mr-2" size={20} />
          –ù–∞–∑–∞–¥
        </Button>

        <div className="space-y-6">
          <div className="text-center space-y-2">
            <h2 className="text-2xl font-bold">üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
            <p className="text-muted-foreground">–í—Å–µ –≤–∞—à–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</p>
          </div>

          <div className="space-y-3">
            {transactions.length === 0 ? (
              <Card className="p-6 text-center text-muted-foreground">
                –ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
              </Card>
            ) : (
              transactions.map((tx) => (
                <Card key={tx.id} className="p-4 bg-card border-border">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="font-medium">
                        {tx.currency === 'CNY' ? '¬•' : '‚ÇΩ'} {tx.amount}
                        {tx.currency === 'RUB' && (
                          <span className="text-sm text-muted-foreground ml-2">
                            (¬• {tx.amount_cny})
                          </span>
                        )}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        {new Date(tx.date).toLocaleString('ru-RU')}
                      </p>
                    </div>
                    <div>
                      {tx.status === 'completed' && (
                        <span className="text-green-500 text-sm">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                      )}
                      {tx.status === 'pending' && (
                        <span className="text-yellow-500 text-sm">‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>
                      )}
                      {tx.status === 'failed' && (
                        <span className="text-red-500 text-sm">‚ùå –û—à–∏–±–∫–∞</span>
                      )}
                    </div>
                  </div>
                </Card>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderHelpView = () => (
    <div className="min-h-screen p-4 bg-gradient-to-br from-background via-background to-accent/10">
      <div className="max-w-md mx-auto pt-8">
        <Button
          onClick={() => setView('main')}
          variant="ghost"
          className="mb-6"
        >
          <Icon name="ArrowLeft" className="mr-2" size={20} />
          –ù–∞–∑–∞–¥
        </Button>

        <Card className="p-6 bg-card border-border shadow-xl space-y-6">
          <div className="text-center space-y-2">
            <h2 className="text-2xl font-bold">üÜò –ü–æ–º–æ—â—å</h2>
            <p className="text-muted-foreground">–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</p>
          </div>

          <div className="space-y-4">
            <div className="space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <span>1Ô∏è‚É£</span> –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?
              </h3>
              <p className="text-sm text-muted-foreground pl-8">
                –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ê–ª–∏–ø–µ–π", –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∑–∞–≥—Ä—É–∑–∏—Ç–µ QR-–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
              </p>
            </div>

            <div className="space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <span>2Ô∏è‚É£</span> –ö–∞–∫–æ–π –∫—É—Ä—Å?
              </h3>
              <p className="text-sm text-muted-foreground pl-8">
                1 —é–∞–Ω—å = 11.40 —Ä—É–±–ª–µ–π. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–±–ª–µ–π —Å—É–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
              </p>
            </div>

            <div className="space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <span>3Ô∏è‚É£</span> –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å?
              </h3>
              <p className="text-sm text-muted-foreground pl-8">
                –û–±—ã—á–Ω–æ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
              </p>
            </div>

            <div className="space-y-2">
              <h3 className="font-semibold flex items-center gap-2">
                <span>4Ô∏è‚É£</span> –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?
              </h3>
              <p className="text-sm text-muted-foreground pl-8">
                –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: support@alipaybot.com
              </p>
            </div>
          </div>

          <div className="pt-4 border-t border-border">
            <Button
              variant="outline"
              className="w-full"
              onClick={() => window.open('mailto:support@alipaybot.com')}
            >
              <Icon name="Mail" className="mr-2" size={20} />
              –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            </Button>
          </div>
        </Card>
      </div>
    </div>
  );

  return (
    <>
      {view === 'main' && renderMainView()}
      {view === 'topup' && renderTopupView()}
      {view === 'history' && renderHistoryView()}
      {view === 'help' && renderHelpView()}
      {view === 'admin' && <AdminPanel onBack={() => setView('main')} />}
    </>
  );
};

export default Index;
